<?php

/**
 * @file
 * Tigris theme hooks.
 */

use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\charts\Plugin\views\style\ChartsPluginStyleChart;
use Drupal\entity_reference_revisions\EntityReferenceRevisionsFieldItemList;

/**
 * Implements hook_preprocess_HOOK().
 */
function tigris_preprocess_html(&$variables) {
  $head = $variables['page']['#attached']['html_head'];

  foreach ($head as $key => $head_tag) {
    if (!isset($head_tag[1])) {
      continue;
    }
    elseif ($head_tag[1] !== 'viewport') {
      continue;
    }
    else {
      $head_tag[0]['#attributes']['content'] = 'width=device-width, initial-scale=1, shrink-to-fit=no';
      $head[$key] = $head_tag;
    }
  }
  $variables['page']['#attached']['html_head'] = $head;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function tigris_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if (($node = \Drupal::request()->attributes->get('node')) && (strpos($_SERVER['REQUEST_URI'], "revisions") == FALSE)) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function tigris_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $theme_hook = $variables['theme_hook_original'];
  $current_display_id = $view->current_display;
  $view_id = $view->storage->id();
  $suggestions[] = $theme_hook . '__' . $view_id;
  $suggestions[] = $theme_hook . '__' . $view_id . '__' . $current_display_id;
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function tigris_preprocess_block(&$variables) {
  // Adding block type class for block.
  if ($variables['elements']['#base_plugin_id'] === 'block_content') {
    $blockType = strtr($variables['content']['#block_content']->bundle(), '_', '-');
    $variables['attributes']['class'][] = 'block--type-' . $blockType;
  }
}

/**
 * Implements hook_preprocess_HOOK() for views_view.html.twig.
 */
function tigris_preprocess_views_view(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  if (isset($variables['rows'][0])) {
    $rendered_rows = $variables['rows'][0]['#rows'];
    if (isset($view->rowPlugin->options['alternating_fieldset']) && $view->rowPlugin->options['alternating_fieldset']['alternating']) {
      foreach ($rendered_rows as $index => $row) {
        $variables['rows'][0]['#rows'][$index]['#view_mode'] = $view->rowPlugin->options['alternating_fieldset']['item_' . $index];
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function tigris_views_pre_render(ViewExecutable $view) {
  $style_plugin = $view->style_plugin;
  if ($style_plugin instanceof ChartsPluginStyleChart) {
    foreach ($view->result as $index => $resultRow) {
      if (!$resultRow->_entity instanceof ContentEntityInterface) {
        continue;
      }
      $data = $style_plugin->options['data_fields'];
      foreach ($data as $key => $value) {
        if (isset($resultRow->_entity->toArray()[$key])) {
          if ($value !== 0) {
            $experience = (int) $resultRow->_entity->get($key)->getString();
            $confidence_percentage = floor(($experience / 4) * 100);
            $resultRow->_entity->set($key, $confidence_percentage);
          }
          else {
            $data_key = str_replace(' ', '_', strtolower($resultRow->_entity->get($key)->getString()));
          }
        }
      }
      if (isset($experience) && isset($data_key) && isset($confidence_percentage)) {
        $view->element['#view']->result[$index] = $resultRow;
      }
    }

    $settings = [];
    $settings['tigrisChart']['id'] = $view->storage->id() . '__' . $view->current_display;
    $settings['tigrisChart']['provider'] = $view->style_plugin->options['library'];
    $settings['tigrisChart']['type'] = $style_plugin->options['type'];
    $view->element['#attached']['drupalSettings'] = $settings;
    $view->element['#attached']['library'][] = 'tigris/charts';
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph__bp_carousel.html.twig.
 */
function tigris_preprocess_paragraph__bp_carousel(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $slide_content = $variables['content']['bp_slide_content'];
  if (!empty($slide_content) && $paragraph instanceof Paragraph) {
    foreach ($slide_content as $key => $value) {
      if (!is_int($key) || !is_array($slide_content[$key])) {
        continue;
      }
      $slide = $slide_content[$key]['#paragraph'];
      if (!$slide instanceof Paragraph || empty($slide->toArray()['field_description'])) {
        continue;
      }
      $caption_field = $slide->get('field_description')->view();
      $caption_field['#label_display'] = 'hidden';
      $slide->set('field_description', NULL);
      $variables['content']['bp_slide_content'][$key]['caption'] = $caption_field;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph__bp_columns.html.twig.
 */
function tigris_preprocess_paragraph__bp_columns(&$variables) {
  if (!empty($variables['elements']['bp_column_content']['#items'])) {
    $items = $variables['elements']['bp_column_content']['#items'];
    $count = count($items->getValue());
    if ($items instanceof EntityReferenceRevisionsFieldItemList) {
      for ($i = 0; $i < $count; $i++) {
        $item = $variables['elements']['bp_column_content'][$i];
        /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
        $paragraph = $item['#paragraph'];
        $variables['content']['bp_column_content'][$i]['#attributes']['class'][] = 'col-' . str_replace('_', '-', $paragraph->bundle());
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph__section.html.twig.
 */
function tigris_preprocess_paragraph__section(&$variables) {
  if (!empty($variables['elements']['#paragraph'])) {
    /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['elements']['#paragraph'];
    $heading_level = recursively_get_paragraphs_section_heading_level($paragraph);
    if (!empty($variables['content']['field_section_heading'][0]) && !empty($heading_level)) {
      $variables['content']['field_section_heading'][0]['#template'] = '<h' . $heading_level . '>' .
        $variables['content']['field_section_heading'][0]['#template'] .
        '</h' . $heading_level . '>';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for layout__onecol__node_work.html.twig.
 */
function tigris_preprocess_layout__onecol__node_work(&$variables) {
  if (!isset($variables['content']['field_finish_date'][0])) {
    if (isset($variables['content']['content']['group_job_description']['group_dates']['field_finish_date'])) {
      $variables['content']['content']['group_job_description']['group_dates']['field_finish_date']['#markup'] = 'Present';
    }
    else {
      $variables['content']['content']['field_finish_date']['#markup'] = 'Present';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for layout__onecol__taxonomy_term.html.twig.
 */
function tigris_preprocess_layout__onecol__taxonomy_term($variables) {
  if ($variables['content']['#bundle'] === 'web_skills') {
    $term = $variables['content']['#taxonomy_term'];
    if ($term instanceof Term) {
      $safe_name = str_replace(' ', '-', strtolower($term->getName()));
      $new_url = Url::fromUserInput('/skills/' . $safe_name);
      $variables['content']['content']['taxonomy_term_link'][0][0]['#context']['entity_url'] = $new_url;
    }
  }
}

function tigris_preprocess_views_view__web_skills__block_web_skills_level_chart(&$vars){
  $vars['more']['#options']['attributes']['class'][] = 'btn btn-main';
}
